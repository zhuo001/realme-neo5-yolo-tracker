name: build-apk

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Accept Android licenses
      run: yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
      
    - name: Install specific NDK version
      run: |
        # Install NDK 27.3.13750724 to match system
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "ndk;27.3.13750724" || true
        # Also install NDK bundle as fallback
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "ndk-bundle" || true
        
    - name: Setup Gradle with network retry
      run: |
        mkdir -p ~/.gradle
        echo "org.gradle.daemon=false" >> ~/.gradle/gradle.properties
        echo "org.gradle.parallel=true" >> ~/.gradle/gradle.properties
        echo "org.gradle.jvmargs=-Xmx2048m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8" >> ~/.gradle/gradle.properties
        echo "org.gradle.configureondemand=true" >> ~/.gradle/gradle.properties
      
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Download and setup compatible Gradle
      run: |
        # Download Gradle 8.2 directly
        wget https://services.gradle.org/distributions/gradle-8.2-bin.zip
        unzip -q gradle-8.2-bin.zip
        export PATH=$PWD/gradle-8.2/bin:$PATH
        
        # Create wrapper with specific version
        gradle wrapper --gradle-version 8.2 --no-daemon
        chmod +x gradlew
        
        # Verify version
        ./gradlew --version
        
    - name: Create local.properties with retry
      run: |
        echo "sdk.dir=$ANDROID_HOME" > local.properties
        # Try to set NDK path to the installed version
        if [ -d "$ANDROID_HOME/ndk/27.3.13750724" ]; then
          echo "ndk.dir=$ANDROID_HOME/ndk/27.3.13750724" >> local.properties
        elif [ -d "$ANDROID_HOME/ndk-bundle" ]; then
          echo "ndk.dir=$ANDROID_HOME/ndk-bundle" >> local.properties
        elif [ -n "$ANDROID_NDK_ROOT" ]; then
          echo "ndk.dir=$ANDROID_NDK_ROOT" >> local.properties
        fi
        cat local.properties
        
    - name: Clean project
      run: |
        if [ -f gradlew ]; then
          ./gradlew clean --no-daemon --stacktrace
        else
          gradle clean --no-daemon --stacktrace
        fi
        
    - name: Build Debug APK with retry
      run: |
        GRADLE_CMD="gradle"
        if [ -f gradlew ]; then
          GRADLE_CMD="./gradlew"
        fi
        
        for i in {1..3}; do
          $GRADLE_CMD assembleDebug --no-daemon --stacktrace --offline || $GRADLE_CMD assembleDebug --no-daemon --stacktrace
          if [ $? -eq 0 ]; then break; fi
          echo "Attempt $i failed, retrying..."
          sleep 10
        done
      
    - name: Build Release APK with retry
      run: |
        GRADLE_CMD="gradle"
        if [ -f gradlew ]; then
          GRADLE_CMD="./gradlew"
        fi
        
        for i in {1..3}; do
          $GRADLE_CMD assembleRelease --no-daemon --stacktrace --offline || $GRADLE_CMD assembleRelease --no-daemon --stacktrace
          if [ $? -eq 0 ]; then break; fi
          echo "Attempt $i failed, retrying..."
          sleep 10
        done
        
    - name: List APK files
      run: |
        find app/build/outputs/apk -name "*.apk" -type f
        
    - name: Upload Debug APK
      uses: actions/upload-artifact@v4
      with:
        name: realme-neo5-yolo-debug-apk
        path: app/build/outputs/apk/debug/app-debug.apk
        retention-days: 30
        
    - name: Upload Release APK
      uses: actions/upload-artifact@v4
      with:
        name: realme-neo5-yolo-release-apk
        path: app/build/outputs/apk/release/app-release.apk
        retention-days: 30
        
    - name: Build Summary
      run: |
        echo "🎉 Android APK构建完成！"
        echo "📱 为Realme Neo 5 150W设备构建的YOLO跟踪器APK已准备就绪"
        echo ""
        echo "📦 构建产物:"
        echo "  • Debug APK: realme-neo5-yolo-debug-apk"
        echo "  • Release APK: realme-neo5-yolo-release-apk"
        echo ""
        echo "⬇️ 下载方式:"
        echo "  1. 点击Actions页面上的工作流运行"
        echo "  2. 在Artifacts部分下载APK文件"
        echo "  3. 传输到Realme Neo 5 150W设备并安装"
        echo ""
        echo "✅ 构建流程已完成，窗口可以关闭"
        echo ""
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "🏁 构建任务完成 - 所有APK文件已上传至Artifacts"
        echo "🔒 工作流程已结束，可以安全关闭此页面"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
